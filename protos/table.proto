/*
 * Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
 */

syntax = "proto3";

package io.deephaven.proto.backplane.grpc;

option java_multiple_files = true;
option optimize_for = SPEED;

import "flight.proto";

service TableService {

  /*
   * Create an empty table with the given column names and types.
   */
  rpc emptyTable(EmptyTableRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Create a time table with the given start time and period.
   */
  rpc timeTable(TimeTableRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Drop columns from the parent table.
   */
  rpc dropColumns(DropColumnsRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Add columns to the given table using the given column specifications and the update table operation.
   */
  rpc update(SelectOrUpdateRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Add columns to the given table using the given column specifications and the lazyUpdate table operation.
   */
  rpc lazyUpdate(SelectOrUpdateRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Add columns to the given table using the given column specifications and the view table operation.
   */
  rpc view(SelectOrUpdateRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Add columns to the given table using the given column specifications and the updateView table operation.
   */
  rpc updateView(SelectOrUpdateRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Select the given columns from the given table.
   */
  rpc select(SelectOrUpdateRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Returns a new table definition with the unique tuples of the specified columns
   */
  rpc selectDistinct(SelectDistinctRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Filter parent table with structured filters.
   */
  rpc filter(FilterTableRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Filter parent table with unstructured filters.
   */
  rpc unstructuredFilter(UnstructuredFilterTableRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Sort parent table via the provide sort descriptors.
   */
  rpc sort(SortTableRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Extract rows from the head of the parent table.
   */
  rpc head(HeadOrTailRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Extract rows from the tail of the parent table.
   */
  rpc tail(HeadOrTailRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Run the headBy table operation for the given group by columns on the given table.
   */
  rpc headBy(HeadOrTailByRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Run the tailBy operation for the given group by columns on the given table.
   */
  rpc tailBy(HeadOrTailByRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Ungroup the given columns (all columns will be ungrouped if columnsToUngroup is empty or unspecified).
   */
  rpc ungroup(UngroupRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Create a merged table from the given input tables. If a key column is provided (not null), a sorted
   * merged will be performed using that column.
   */
  rpc mergeTables(MergeTablesRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Returns the result of a table join operation.
   */
  rpc joinTables(JoinTablesRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Returns the result of an aggregate table operation.
   */
  rpc comboAggregate(ComboAggregateRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Snapshot rightId, triggered by leftId, and export the resulting new Table.
   * The left table's change events cause a new snapshot to be taken. The result table includes a
   * "snapshot key" which is a subset (possibly all) of the left table's columns. The
   * remaining columns in the result table come from right table, the table being snapshotted.
   */
  rpc snapshot(SnapshotTableRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Returns a new table with a flattened index.
   */
  rpc flatten(FlattenRequest) returns (ExportedTableCreationResponse) {}

  /*
   * Batch a series of requests and send them all at once. This enables the user to create intermediate tables without
   * requiring them to be exported and managed by the client. The server will automatically release any tables when they
   * are no longer depended upon.
   */
  rpc batch(BatchTableRequest) returns (stream ExportedTableCreationResponse) {}

  /*
   * Establish a stream of table updates for cheap notifications of table size updates.
   *
   * New streams will flush updates for all existing table exports. An export id of zero will be sent to indicate all
   * exports have sent their refresh update. Table updates may be intermingled with initial refresh updates after their
   * initial update had been sent.
   */
  rpc exportedTableUpdates(ExportedTableUpdatesRequest) returns (stream ExportedTableUpdateBatchMessage) {}
}

message TableReference {
  oneof ref {
    // an exported ticket
    arrow.flight.protocol.Ticket ticket = 1;
    // an offset into a BatchRequest -- used to reference a result that will not be exported
    sint32 batchOffset = 2;
  }
}

message ExportedTableCreationResponse {
  TableReference resultId = 1;

  // If this is part of a batch, you may receive creation messages that indicate the sub-operation failed.
  bool success = 2;

  // If this is part of a batch, this errorInfo will be the message provided
  string errorInfo = 3;

  // Schema as described in Arrow Message.fbs::Message.
  bytes schema_header = 4;

  // Whether or not this table might change.
  bool isStatic = 5;

  // The current number of rows for this table.
  sint64 size = 6 [jstype=JS_STRING];

  // TODO: attributes
}

message ExportedTableUpdatesRequest {
  // Intentionally empty and is here for backwards compatibility should this API change.
}

message ExportedTableUpdateMessage {
  arrow.flight.protocol.Ticket exportId = 1;
  sint64 size = 2 [jstype=JS_STRING];
  string updateFailureMessage = 3;
}

message ExportedTableUpdateBatchMessage {
  repeated ExportedTableUpdateMessage updates = 1;
}

message EmptyTableRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  sint64 size = 2 [jstype=JS_STRING];
  repeated string columnNames = 3;
  repeated string columnTypes = 4;
}

message TimeTableRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  sint64 startTimeNanos = 2 [jstype=JS_STRING];
  sint64 periodNanos = 3 [jstype=JS_STRING];
}

message SelectOrUpdateRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
  repeated string columnSpecs = 3;
}

message SelectDistinctRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
  repeated string columnNames = 3;
}

message DropColumnsRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
  repeated string columnNames = 3;
}

message UnstructuredFilterTableRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
  repeated string filter = 3;
}

message HeadOrTailRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
  sint64 numRows = 3 [jstype=JS_STRING];
}

message HeadOrTailByRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
  sint64 numRows = 3 [jstype=JS_STRING];
  repeated string groupByColumnSpecs = 4;
}

message UngroupRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
  bool nullFill = 3;
  repeated string columnsToUngroup = 4;
}

message MergeTablesRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  repeated TableReference sourceIds = 2;
  string keyColumn = 3; // if specified, the result will be sorted by this column
}

message SnapshotTableRequest {
  arrow.flight.protocol.Ticket resultId = 1;

  // The table on which to invoke the snapshot function. If unset, an empty(1) table will be used.
  TableReference leftId = 2;
  // The table to pass into the snapshot function.
  TableReference rightId = 3;
  // Whether to take an initial snapshot (passed to table.snapshot function).
  bool doInitialSnapshot = 4;
  // Which columns to take from the left table (can be renamed if desired).
  repeated string stampColumns = 5;
}

message JoinTablesRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference leftId = 2;
  TableReference rightId = 3;
  repeated string columnsToMatch = 4;
  repeated string columnsToAdd = 5;
  Type joinType = 6;

  enum Type {
    CrossJoin = 0;
    NaturalJoin = 1;
    AsOfJoin = 2;
    ReverseAsOfJoin = 3;
    ExactJoin = 4;
    LeftJoin = 5;
  }
}

message ComboAggregateRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
  repeated Aggregate aggregates = 3;
  repeated string groupByColumns = 4;
  bool forceCombo = 5; // don't use direct single-aggregate table operations even if there is only a single aggregate

  message Aggregate {
    AggType type = 1;
    repeated string matchPairs = 2; // used in all aggregates except countBy
    string columnName = 3; // countBy result (output) column OR weighted avg weight (input) column, otherwise unused
    double percentile = 4; // required by percentileBy aggregates, otherwise unused
    bool avgMedian = 5; // used in percentileBy only
  }

  enum AggType {
    Sum = 0;
    AbsSum = 1;
    Array = 2;
    Avg = 3;
    Count = 4;
    First = 5;
    Last = 6;
    Min = 7;
    Max = 8;
    Median = 9;
    Percentile = 10;
    Std = 11;
    Var = 12;
    WeightedAvg = 13;
  }
}

message SortDescriptor {
  string columnName = 1;
  bool isAbsolute = 2;
  SortDirection direction = 3;

  enum SortDirection {
    UNKNOWN = 0;
    DESCENDING = -1;
    ASCENDING = 1;
    REVERSE = 2;
  }
}

message SortTableRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
  repeated SortDescriptor sorts = 3;
}

message FilterTableRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;

  repeated FilterDescription filters = 3;
}

message FilterDescription {
  Operation filterOp = 1;
  repeated FilterDescription children = 2;
  oneof value {
    string stringValue = 3;
    double doubleValue = 4;
    bool boolValue = 5;
    sint64 longValue = 6;
    sint64 nanoTimeValue = 7; // nanos since the epoch
  }

  enum Operation {
    UNKNOWN = 0;
    // 2+ children
    AND = 1;
    OR = 2;

    // 1 child
    NOT = 3;

    // 2 children are values
    LT = 4;
    GT = 5;
    LTE = 6;
    GTE = 7;
    EQ = 8;
    EQ_ICASE = 9;
    NEQ = 10;
    NEQ_ICASE = 11;

    // 2+ children are values
    IN = 12;
    IN_ICASE = 13;
    NOT_IN = 14;
    NOT_IN_ICASE = 15;

    // 1 child is anything (probably just value)
    IS_NULL = 16;
    // 0+ children are anything
    INVOKE = 17;

    // 0 children
    LITERAL = 18;
    REFERENCE = 19;

    CONTAINS = 20;
    CONTAINS_ICASE = 21;
    MATCHES = 22;
    MATCHES_ICASE = 23;

    SEARCH = 24;
  }
}

message FlattenRequest {
  arrow.flight.protocol.Ticket resultId = 1;
  TableReference sourceId = 2;
}

message BatchTableRequest {
  repeated Operation op = 1;

  message Operation {
    oneof op {
      EmptyTableRequest emptyTable = 1;
      TimeTableRequest timeTable = 2;
      DropColumnsRequest dropColumns = 3;
      SelectOrUpdateRequest update = 4;
      SelectOrUpdateRequest lazyUpdate = 5;
      SelectOrUpdateRequest view = 6;
      SelectOrUpdateRequest updateView = 7;
      SelectOrUpdateRequest select = 8;
      SelectDistinctRequest selectDistinct = 9;
      FilterTableRequest filter = 10;
      UnstructuredFilterTableRequest unstructuredFilter = 11;
      SortTableRequest sort = 12;
      HeadOrTailRequest head = 13;
      HeadOrTailRequest tail = 14;
      HeadOrTailByRequest headBy = 15;
      HeadOrTailByRequest tailBy = 16;
      UngroupRequest ungroup = 17;
      MergeTablesRequest merge = 18;
      JoinTablesRequest join = 19;
      ComboAggregateRequest comboAggregate = 20;
      SnapshotTableRequest snapshot = 21;
      FlattenRequest flatten = 22;
    }
  }
}

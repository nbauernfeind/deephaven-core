/*
 * Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
 * GENERATED CODE - DO NOT MODIFY DIRECTLY
 * This class generated by io.deephaven.db.tables.lang.DBLanguageFunctionGenerator
 */

package io.deephaven.db.tables.lang;

import io.deephaven.util.QueryConstants;

@SuppressWarnings({"unused", "WeakerAccess", "SimplifiableIfStatement"})
public final class DBLanguageFunctionUtil {

    public static boolean eq(Object obj1, Object obj2){
        //noinspection SimplifiableBooleanExpression
        return obj1==obj2 || (!(obj1==null ^ obj2==null) && obj1.equals(obj2));
    }
    
    @SuppressWarnings({"unchecked"})
    public static int compareTo(Comparable obj1, Comparable obj2) {
        if (obj1==null){
            return (obj2==null) ? 0 : -1;
        }
        
        if (obj2==null){
            return 1;
        }

        return obj1.compareTo(obj2);
    }

    public static Boolean not(Boolean a){
        return a==QueryConstants.NULL_BOOLEAN ? QueryConstants.NULL_BOOLEAN : Boolean.valueOf(!a);
    }

    public static int PLUS(int a, int b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(int a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(int a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(int a, double b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(int a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(int a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static long PLUS(int a, long b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a+b;
    }

    public static long[] PLUSArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] PLUSArray(int a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static long[] PLUSArray(int a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(int a, float b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(int a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(int a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(int a, char b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(int a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(int a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(int a, byte b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(int a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(int a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(int a, short b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(int a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(int a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(double a, int b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(double a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(double a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(double a, double b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(double a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(double a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(double a, long b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(double a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(double a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(double a, float b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(double a[], float b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(double a, float b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(double a, char b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(double a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(double a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(double a, byte b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(double a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(double a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(double a, short b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(double a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(double a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static long PLUS(long a, int b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_INT ? QueryConstants.NULL_LONG : a+b;
    }

    public static long[] PLUSArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] PLUSArray(long a[], int b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static long[] PLUSArray(long a, int b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(long a, double b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(long a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(long a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static long PLUS(long a, long b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a+b;
    }

    public static long[] PLUSArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] PLUSArray(long a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static long[] PLUSArray(long a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(long a, float b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(long a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(long a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static long PLUS(long a, char b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_LONG : a+b;
    }

    public static long[] PLUSArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] PLUSArray(long a[], char b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static long[] PLUSArray(long a, char b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static long PLUS(long a, byte b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_LONG : a+b;
    }

    public static long[] PLUSArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] PLUSArray(long a[], byte b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static long[] PLUSArray(long a, byte b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static long PLUS(long a, short b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_LONG : a+b;
    }

    public static long[] PLUSArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] PLUSArray(long a[], short b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static long[] PLUSArray(long a, short b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(float a, int b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(float a[], int b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(float a, int b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(float a, double b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(float a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(float a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(float a, long b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(float a[], long b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(float a, long b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(float a, float b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(float a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(float a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(float a, char b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(float a[], char b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(float a, char b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(float a, byte b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(float a[], byte b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(float a, byte b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(float a, short b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(float a[], short b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(float a, short b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(char a, int b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(char a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(char a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(char a, double b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(char a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(char a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static long PLUS(char a, long b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a+b;
    }

    public static long[] PLUSArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] PLUSArray(char a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static long[] PLUSArray(char a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(char a, float b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(char a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(char a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(char a, char b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(char a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(char a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(char a, byte b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(char a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(char a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(char a, short b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(char a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(char a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(byte a, int b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(byte a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(byte a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(byte a, double b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(byte a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(byte a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static long PLUS(byte a, long b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a+b;
    }

    public static long[] PLUSArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] PLUSArray(byte a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static long[] PLUSArray(byte a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(byte a, float b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(byte a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(byte a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(byte a, char b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(byte a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(byte a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(byte a, byte b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(byte a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(byte a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(byte a, short b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(byte a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(byte a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(short a, int b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(short a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(short a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static double PLUS(short a, double b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a+b;
    }

    public static double[] PLUSArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] PLUSArray(short a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static double[] PLUSArray(short a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static long PLUS(short a, long b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a+b;
    }

    public static long[] PLUSArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] PLUSArray(short a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static long[] PLUSArray(short a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static float PLUS(short a, float b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a+b;
    }

    public static float[] PLUSArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] PLUSArray(short a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static float[] PLUSArray(short a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(short a, char b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(short a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(short a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(short a, byte b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(short a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(short a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int PLUS(short a, short b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a+b;
    }

    public static int[] PLUSArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to add two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] PLUSArray(short a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = PLUS(a[i],b);
        }

        return ret;
    }

    public static int[] PLUSArray(short a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = PLUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(int a, int b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(int a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(int a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(int a, double b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(int a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(int a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static long MINUS(int a, long b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a-b;
    }

    public static long[] MINUSArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MINUSArray(int a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static long[] MINUSArray(int a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(int a, float b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(int a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(int a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(int a, char b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(int a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(int a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(int a, byte b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(int a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(int a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(int a, short b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(int a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(int a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(double a, int b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(double a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(double a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(double a, double b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(double a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(double a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(double a, long b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(double a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(double a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(double a, float b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(double a[], float b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(double a, float b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(double a, char b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(double a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(double a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(double a, byte b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(double a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(double a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(double a, short b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(double a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(double a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static long MINUS(long a, int b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_INT ? QueryConstants.NULL_LONG : a-b;
    }

    public static long[] MINUSArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MINUSArray(long a[], int b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static long[] MINUSArray(long a, int b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(long a, double b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(long a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(long a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static long MINUS(long a, long b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a-b;
    }

    public static long[] MINUSArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MINUSArray(long a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static long[] MINUSArray(long a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(long a, float b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(long a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(long a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static long MINUS(long a, char b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_LONG : a-b;
    }

    public static long[] MINUSArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MINUSArray(long a[], char b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static long[] MINUSArray(long a, char b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static long MINUS(long a, byte b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_LONG : a-b;
    }

    public static long[] MINUSArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MINUSArray(long a[], byte b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static long[] MINUSArray(long a, byte b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static long MINUS(long a, short b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_LONG : a-b;
    }

    public static long[] MINUSArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MINUSArray(long a[], short b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static long[] MINUSArray(long a, short b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(float a, int b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(float a[], int b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(float a, int b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(float a, double b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(float a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(float a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(float a, long b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(float a[], long b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(float a, long b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(float a, float b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(float a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(float a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(float a, char b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(float a[], char b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(float a, char b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(float a, byte b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(float a[], byte b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(float a, byte b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(float a, short b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(float a[], short b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(float a, short b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(char a, int b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(char a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(char a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(char a, double b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(char a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(char a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static long MINUS(char a, long b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a-b;
    }

    public static long[] MINUSArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MINUSArray(char a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static long[] MINUSArray(char a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(char a, float b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(char a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(char a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(char a, char b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(char a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(char a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(char a, byte b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(char a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(char a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(char a, short b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(char a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(char a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(byte a, int b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(byte a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(byte a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(byte a, double b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(byte a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(byte a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static long MINUS(byte a, long b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a-b;
    }

    public static long[] MINUSArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MINUSArray(byte a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static long[] MINUSArray(byte a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(byte a, float b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(byte a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(byte a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(byte a, char b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(byte a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(byte a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(byte a, byte b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(byte a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(byte a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(byte a, short b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(byte a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(byte a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(short a, int b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(short a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(short a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static double MINUS(short a, double b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a-b;
    }

    public static double[] MINUSArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MINUSArray(short a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static double[] MINUSArray(short a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static long MINUS(short a, long b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a-b;
    }

    public static long[] MINUSArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MINUSArray(short a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static long[] MINUSArray(short a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static float MINUS(short a, float b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a-b;
    }

    public static float[] MINUSArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MINUSArray(short a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static float[] MINUSArray(short a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(short a, char b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(short a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(short a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(short a, byte b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(short a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(short a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MINUS(short a, short b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a-b;
    }

    public static int[] MINUSArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to subtract two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MINUSArray(short a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MINUS(a[i],b);
        }

        return ret;
    }

    public static int[] MINUSArray(short a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MINUS(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(int a, int b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(int a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(int a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(int a, double b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(int a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(int a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static long MULTIPLY(int a, long b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a*b;
    }

    public static long[] MULTIPLYArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MULTIPLYArray(int a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static long[] MULTIPLYArray(int a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(int a, float b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(int a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(int a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(int a, char b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(int a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(int a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(int a, byte b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(int a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(int a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(int a, short b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(int a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(int a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(double a, int b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(double a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(double a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(double a, double b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(double a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(double a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(double a, long b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(double a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(double a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(double a, float b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(double a[], float b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(double a, float b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(double a, char b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(double a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(double a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(double a, byte b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(double a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(double a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(double a, short b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(double a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(double a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static long MULTIPLY(long a, int b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_INT ? QueryConstants.NULL_LONG : a*b;
    }

    public static long[] MULTIPLYArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MULTIPLYArray(long a[], int b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static long[] MULTIPLYArray(long a, int b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(long a, double b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(long a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(long a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static long MULTIPLY(long a, long b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a*b;
    }

    public static long[] MULTIPLYArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MULTIPLYArray(long a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static long[] MULTIPLYArray(long a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(long a, float b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(long a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(long a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static long MULTIPLY(long a, char b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_LONG : a*b;
    }

    public static long[] MULTIPLYArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MULTIPLYArray(long a[], char b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static long[] MULTIPLYArray(long a, char b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static long MULTIPLY(long a, byte b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_LONG : a*b;
    }

    public static long[] MULTIPLYArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MULTIPLYArray(long a[], byte b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static long[] MULTIPLYArray(long a, byte b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static long MULTIPLY(long a, short b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_LONG : a*b;
    }

    public static long[] MULTIPLYArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MULTIPLYArray(long a[], short b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static long[] MULTIPLYArray(long a, short b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(float a, int b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(float a[], int b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(float a, int b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(float a, double b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(float a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(float a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(float a, long b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(float a[], long b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(float a, long b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(float a, float b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(float a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(float a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(float a, char b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(float a[], char b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(float a, char b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(float a, byte b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(float a[], byte b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(float a, byte b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(float a, short b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(float a[], short b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(float a, short b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(char a, int b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(char a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(char a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(char a, double b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(char a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(char a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static long MULTIPLY(char a, long b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a*b;
    }

    public static long[] MULTIPLYArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MULTIPLYArray(char a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static long[] MULTIPLYArray(char a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(char a, float b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(char a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(char a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(char a, char b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(char a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(char a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(char a, byte b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(char a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(char a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(char a, short b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(char a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(char a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(byte a, int b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(byte a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(byte a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(byte a, double b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(byte a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(byte a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static long MULTIPLY(byte a, long b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a*b;
    }

    public static long[] MULTIPLYArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MULTIPLYArray(byte a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static long[] MULTIPLYArray(byte a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(byte a, float b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(byte a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(byte a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(byte a, char b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(byte a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(byte a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(byte a, byte b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(byte a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(byte a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(byte a, short b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(byte a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(byte a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(short a, int b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(short a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(short a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double MULTIPLY(short a, double b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a*b;
    }

    public static double[] MULTIPLYArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] MULTIPLYArray(short a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static double[] MULTIPLYArray(short a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static long MULTIPLY(short a, long b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a*b;
    }

    public static long[] MULTIPLYArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] MULTIPLYArray(short a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static long[] MULTIPLYArray(short a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static float MULTIPLY(short a, float b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a*b;
    }

    public static float[] MULTIPLYArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] MULTIPLYArray(short a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static float[] MULTIPLYArray(short a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(short a, char b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(short a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(short a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(short a, byte b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(short a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(short a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static int MULTIPLY(short a, short b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a*b;
    }

    public static int[] MULTIPLYArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to multiply two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] MULTIPLYArray(short a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = MULTIPLY(a[i],b);
        }

        return ret;
    }

    public static int[] MULTIPLYArray(short a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = MULTIPLY(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(int a, int b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(int a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(int a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(int a, double b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a/b;
    }

    public static double[] DIVIDEArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(int a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(int a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(int a, long b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(int a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(int a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static float DIVIDE(int a, float b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a/b;
    }

    public static float[] DIVIDEArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] DIVIDEArray(int a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static float[] DIVIDEArray(int a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(int a, char b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(int a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(int a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(int a, byte b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(int a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(int a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(int a, short b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(int a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(int a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(double a, int b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(double a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(double a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(double a, double b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a/b;
    }

    public static double[] DIVIDEArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(double a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(double a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(double a, long b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(double a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(double a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(double a, float b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_DOUBLE : a/b;
    }

    public static double[] DIVIDEArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(double a[], float b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(double a, float b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(double a, char b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(double a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(double a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(double a, byte b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(double a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(double a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(double a, short b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(double a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(double a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(long a, int b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(long a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(long a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(long a, double b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a/b;
    }

    public static double[] DIVIDEArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(long a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(long a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(long a, long b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(long a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(long a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static float DIVIDE(long a, float b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a/b;
    }

    public static float[] DIVIDEArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] DIVIDEArray(long a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static float[] DIVIDEArray(long a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(long a, char b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(long a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(long a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(long a, byte b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(long a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(long a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(long a, short b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(long a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(long a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(float a, int b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(float a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(float a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(float a, double b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a/b;
    }

    public static double[] DIVIDEArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(float a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(float a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(float a, long b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(float a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(float a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static float DIVIDE(float a, float b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a/b;
    }

    public static float[] DIVIDEArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] DIVIDEArray(float a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static float[] DIVIDEArray(float a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(float a, char b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(float a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(float a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(float a, byte b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(float a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(float a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(float a, short b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(float a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(float a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(char a, int b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(char a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(char a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(char a, double b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a/b;
    }

    public static double[] DIVIDEArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(char a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(char a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(char a, long b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(char a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(char a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static float DIVIDE(char a, float b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a/b;
    }

    public static float[] DIVIDEArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] DIVIDEArray(char a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static float[] DIVIDEArray(char a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(char a, char b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(char a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(char a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(char a, byte b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(char a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(char a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(char a, short b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(char a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(char a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(byte a, int b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(byte a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(byte a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(byte a, double b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a/b;
    }

    public static double[] DIVIDEArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(byte a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(byte a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(byte a, long b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(byte a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(byte a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static float DIVIDE(byte a, float b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a/b;
    }

    public static float[] DIVIDEArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] DIVIDEArray(byte a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static float[] DIVIDEArray(byte a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(byte a, char b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(byte a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(byte a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(byte a, byte b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(byte a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(byte a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(byte a, short b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(byte a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(byte a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(short a, int b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(short a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(short a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(short a, double b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a/b;
    }

    public static double[] DIVIDEArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(short a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(short a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(short a, long b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(short a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(short a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static float DIVIDE(short a, float b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a/b;
    }

    public static float[] DIVIDEArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] DIVIDEArray(short a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static float[] DIVIDEArray(short a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(short a, char b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(short a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(short a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(short a, byte b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(short a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(short a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static double DIVIDE(short a, short b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a/(double)b;
    }

    public static double[] DIVIDEArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to divide two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] DIVIDEArray(short a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = DIVIDE(a[i],b);
        }

        return ret;
    }

    public static double[] DIVIDEArray(short a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = DIVIDE(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(int a, int b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(int a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(int a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(int a, double b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(int a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(int a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static long REMAINDER(int a, long b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a%b;
    }

    public static long[] REMAINDERArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] REMAINDERArray(int a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static long[] REMAINDERArray(int a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(int a, float b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(int a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(int a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(int a, char b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(int a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(int a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(int a, byte b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(int a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(int a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(int a, short b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(int a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(int a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(double a, int b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(double a[], int b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(double a, int b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(double a, double b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(double a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(double a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(double a, long b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(double a[], long b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(double a, long b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(double a, float b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(double a[], float b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(double a, float b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(double a, char b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(double a[], char b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(double a, char b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(double a, byte b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(double a[], byte b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(double a, byte b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(double a, short b){
        return a==QueryConstants.NULL_DOUBLE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(double a[], short b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(double a, short b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static long REMAINDER(long a, int b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_INT ? QueryConstants.NULL_LONG : a%b;
    }

    public static long[] REMAINDERArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] REMAINDERArray(long a[], int b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static long[] REMAINDERArray(long a, int b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(long a, double b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(long a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(long a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static long REMAINDER(long a, long b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a%b;
    }

    public static long[] REMAINDERArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] REMAINDERArray(long a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static long[] REMAINDERArray(long a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(long a, float b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(long a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(long a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static long REMAINDER(long a, char b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_LONG : a%b;
    }

    public static long[] REMAINDERArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] REMAINDERArray(long a[], char b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static long[] REMAINDERArray(long a, char b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static long REMAINDER(long a, byte b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_LONG : a%b;
    }

    public static long[] REMAINDERArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] REMAINDERArray(long a[], byte b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static long[] REMAINDERArray(long a, byte b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static long REMAINDER(long a, short b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_LONG : a%b;
    }

    public static long[] REMAINDERArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] REMAINDERArray(long a[], short b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static long[] REMAINDERArray(long a, short b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(float a, int b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(float a[], int b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(float a, int b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(float a, double b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(float a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(float a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(float a, long b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(float a[], long b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(float a, long b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(float a, float b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(float a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(float a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(float a, char b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(float a[], char b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(float a, char b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(float a, byte b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(float a[], byte b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(float a, byte b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(float a, short b){
        return a==QueryConstants.NULL_FLOAT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(float a[], short b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(float a, short b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(char a, int b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(char a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(char a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(char a, double b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(char a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(char a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static long REMAINDER(char a, long b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a%b;
    }

    public static long[] REMAINDERArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] REMAINDERArray(char a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static long[] REMAINDERArray(char a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(char a, float b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(char a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(char a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(char a, char b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(char a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(char a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(char a, byte b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(char a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(char a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(char a, short b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(char a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(char a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(byte a, int b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(byte a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(byte a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(byte a, double b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(byte a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(byte a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static long REMAINDER(byte a, long b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a%b;
    }

    public static long[] REMAINDERArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] REMAINDERArray(byte a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static long[] REMAINDERArray(byte a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(byte a, float b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(byte a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(byte a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(byte a, char b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(byte a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(byte a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(byte a, byte b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(byte a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(byte a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(byte a, short b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(byte a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(byte a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(short a, int b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(short a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(short a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static double REMAINDER(short a, double b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : a%b;
    }

    public static double[] REMAINDERArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static double[] REMAINDERArray(short a[], double b){
        double[] ret = new double[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static double[] REMAINDERArray(short a, double b[]){
        double[] ret = new double[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static long REMAINDER(short a, long b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a%b;
    }

    public static long[] REMAINDERArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] REMAINDERArray(short a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static long[] REMAINDERArray(short a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static float REMAINDER(short a, float b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : a%b;
    }

    public static float[] REMAINDERArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static float[] REMAINDERArray(short a[], float b){
        float[] ret = new float[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static float[] REMAINDERArray(short a, float b[]){
        float[] ret = new float[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(short a, char b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(short a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(short a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(short a, byte b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(short a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(short a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int REMAINDER(short a, short b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a%b;
    }

    public static int[] REMAINDERArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to calculate remainder of two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] REMAINDERArray(short a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = REMAINDER(a[i],b);
        }

        return ret;
    }

    public static int[] REMAINDERArray(short a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = REMAINDER(a,b[i]);
        }

        return ret;
    }

    public static int BINARY_OR(int a, int b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a|b;
    }

    public static int[] BINARY_ORArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_OR two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] BINARY_ORArray(int a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b);
        }

        return ret;
    }

    public static int[] BINARY_ORArray(int a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_OR(a,b[i]);
        }

        return ret;
    }

    public static long BINARY_OR(long a, long b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a|b;
    }

    public static long[] BINARY_ORArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_OR two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] BINARY_ORArray(long a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b);
        }

        return ret;
    }

    public static long[] BINARY_ORArray(long a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_OR(a,b[i]);
        }

        return ret;
    }

    public static int BINARY_OR(char a, char b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a|b;
    }

    public static int[] BINARY_ORArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_OR two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] BINARY_ORArray(char a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b);
        }

        return ret;
    }

    public static int[] BINARY_ORArray(char a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_OR(a,b[i]);
        }

        return ret;
    }

    public static int BINARY_OR(byte a, byte b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a|b;
    }

    public static int[] BINARY_ORArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_OR two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] BINARY_ORArray(byte a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b);
        }

        return ret;
    }

    public static int[] BINARY_ORArray(byte a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_OR(a,b[i]);
        }

        return ret;
    }

    public static int BINARY_OR(short a, short b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a|b;
    }

    public static int[] BINARY_ORArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_OR two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] BINARY_ORArray(short a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_OR(a[i],b);
        }

        return ret;
    }

    public static int[] BINARY_ORArray(short a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_OR(a,b[i]);
        }

        return ret;
    }

    public static int XOR(int a, int b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a^b;
    }

    public static int[] XORArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to XOR two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] XORArray(int a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b);
        }

        return ret;
    }

    public static int[] XORArray(int a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = XOR(a,b[i]);
        }

        return ret;
    }

    public static long XOR(long a, long b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a^b;
    }

    public static long[] XORArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to XOR two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] XORArray(long a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b);
        }

        return ret;
    }

    public static long[] XORArray(long a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = XOR(a,b[i]);
        }

        return ret;
    }

    public static int XOR(char a, char b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a^b;
    }

    public static int[] XORArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to XOR two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] XORArray(char a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b);
        }

        return ret;
    }

    public static int[] XORArray(char a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = XOR(a,b[i]);
        }

        return ret;
    }

    public static int XOR(byte a, byte b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a^b;
    }

    public static int[] XORArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to XOR two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] XORArray(byte a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b);
        }

        return ret;
    }

    public static int[] XORArray(byte a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = XOR(a,b[i]);
        }

        return ret;
    }

    public static int XOR(short a, short b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a^b;
    }

    public static int[] XORArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to XOR two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] XORArray(short a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = XOR(a[i],b);
        }

        return ret;
    }

    public static int[] XORArray(short a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = XOR(a,b[i]);
        }

        return ret;
    }

    public static int BINARY_AND(int a, int b){
        return a==QueryConstants.NULL_INT || b==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : a&b;
    }

    public static int[] BINARY_ANDArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_AND two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] BINARY_ANDArray(int a[], int b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b);
        }

        return ret;
    }

    public static int[] BINARY_ANDArray(int a, int b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_AND(a,b[i]);
        }

        return ret;
    }

    public static long BINARY_AND(long a, long b){
        return a==QueryConstants.NULL_LONG || b==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : a&b;
    }

    public static long[] BINARY_ANDArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_AND two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b[i]);
        }
        
        return ret;
    }

    public static long[] BINARY_ANDArray(long a[], long b){
        long[] ret = new long[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b);
        }

        return ret;
    }

    public static long[] BINARY_ANDArray(long a, long b[]){
        long[] ret = new long[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_AND(a,b[i]);
        }

        return ret;
    }

    public static int BINARY_AND(char a, char b){
        return a==QueryConstants.NULL_CHAR || b==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : a&b;
    }

    public static int[] BINARY_ANDArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_AND two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] BINARY_ANDArray(char a[], char b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b);
        }

        return ret;
    }

    public static int[] BINARY_ANDArray(char a, char b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_AND(a,b[i]);
        }

        return ret;
    }

    public static int BINARY_AND(byte a, byte b){
        return a==QueryConstants.NULL_BYTE || b==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : a&b;
    }

    public static int[] BINARY_ANDArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_AND two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] BINARY_ANDArray(byte a[], byte b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b);
        }

        return ret;
    }

    public static int[] BINARY_ANDArray(byte a, byte b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_AND(a,b[i]);
        }

        return ret;
    }

    public static int BINARY_AND(short a, short b){
        return a==QueryConstants.NULL_SHORT || b==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : a&b;
    }

    public static int[] BINARY_ANDArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to BINARY_AND two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b[i]);
        }
        
        return ret;
    }

    public static int[] BINARY_ANDArray(short a[], short b){
        int[] ret = new int[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = BINARY_AND(a[i],b);
        }

        return ret;
    }

    public static int[] BINARY_ANDArray(short a, short b[]){
        int[] ret = new int[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = BINARY_AND(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(int a, int b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_INT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_INT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(int a, int b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_INT);
        }
        
        if (b==QueryConstants.NULL_INT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(int a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(int a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(int a, double b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_DOUBLE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(int a, double b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_DOUBLE);
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(int a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(int a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(int a, long b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_LONG) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_LONG){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(int a, long b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_LONG);
        }
        
        if (b==QueryConstants.NULL_LONG){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(int a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(int a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(int a, float b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_FLOAT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(int a, float b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_FLOAT);
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(int a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(int a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(int a, char b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_CHAR) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(int a, char b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_CHAR);
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(int a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(int a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(int a, byte b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_BYTE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(int a, byte b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_BYTE);
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(int a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(int a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(int a, short b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_SHORT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(int a, short b) {
        if (a==QueryConstants.NULL_INT){
            return (b==QueryConstants.NULL_SHORT);
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(int a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(int a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(double a, int b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_INT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_INT){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(double a, int b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_INT);
        }
        
        if (b==QueryConstants.NULL_INT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(double a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(double a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(double a, double b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_DOUBLE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(double a, double b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_DOUBLE);
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(double a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(double a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(double a, long b) {
        return -compareTo(b, a);
    }

    public static boolean eq(double a, long b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_LONG);
        }
        
        if (b==QueryConstants.NULL_LONG){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(double a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(double a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(double a, float b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_FLOAT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(double a, float b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_FLOAT);
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(double a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(double a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(double a, char b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_CHAR) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(double a, char b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_CHAR);
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(double a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(double a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(double a, byte b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_BYTE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(double a, byte b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_BYTE);
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(double a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(double a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(double a, short b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_SHORT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(double a, short b) {
        if (a==QueryConstants.NULL_DOUBLE){
            return (b==QueryConstants.NULL_SHORT);
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(double a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(double a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(long a, int b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_INT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_INT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(long a, int b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_INT);
        }
        
        if (b==QueryConstants.NULL_INT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(long a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(long a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(long a, double b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_DOUBLE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return 1;
        }

        if(Double.isNaN(b)) {
            return -1;
        }
        if(b > Long.MAX_VALUE) {
            return -1;
        } else if(b < Long.MIN_VALUE) {
            return 1;
        } else {
            final long longValue = (long) b;
            if (longValue > a) {
                return -1;
            } else if (longValue == a) {
                if (b - longValue == 0d) {
                    return 0;
                } else if (b - longValue > 0d) {
                    return -1;
                }
            }
            return 1;
        }
    }

    public static boolean eq(long a, double b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_DOUBLE);
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(long a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(long a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(long a, long b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_LONG) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_LONG){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(long a, long b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_LONG);
        }
        
        if (b==QueryConstants.NULL_LONG){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(long a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(long a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(long a, float b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_FLOAT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return 1;
        }

        if(Double.isNaN(b)) {
            return -1;
        }
        if(b > Long.MAX_VALUE) {
            return -1;
        } else if(b < Long.MIN_VALUE) {
            return 1;
        } else {
            final long longValue = (long) b;
            if (longValue > a) {
                return -1;
            } else if (longValue == a) {
                if (b - longValue == 0d) {
                    return 0;
                } else if (b - longValue > 0d) {
                    return -1;
                }
            }
            return 1;
        }
    }

    public static boolean eq(long a, float b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_FLOAT);
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(long a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(long a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(long a, char b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_CHAR) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(long a, char b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_CHAR);
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(long a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(long a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(long a, byte b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_BYTE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(long a, byte b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_BYTE);
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(long a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(long a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(long a, short b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_SHORT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(long a, short b) {
        if (a==QueryConstants.NULL_LONG){
            return (b==QueryConstants.NULL_SHORT);
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(long a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(long a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(float a, int b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_INT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_INT){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(float a, int b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_INT);
        }
        
        if (b==QueryConstants.NULL_INT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(float a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(float a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(float a, double b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_DOUBLE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(float a, double b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_DOUBLE);
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(float a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(float a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(float a, long b) {
        return -compareTo(b, a);
    }

    public static boolean eq(float a, long b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_LONG);
        }
        
        if (b==QueryConstants.NULL_LONG){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(float a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(float a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(float a, float b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_FLOAT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return 1;
        }

        return Float.compare(a, b);
    }

    public static boolean eq(float a, float b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_FLOAT);
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(float a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(float a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(float a, char b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_CHAR) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(float a, char b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_CHAR);
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(float a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(float a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(float a, byte b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_BYTE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(float a, byte b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_BYTE);
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(float a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(float a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(float a, short b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_SHORT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(float a, short b) {
        if (a==QueryConstants.NULL_FLOAT){
            return (b==QueryConstants.NULL_SHORT);
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(float a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(float a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(char a, int b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_INT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_INT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(char a, int b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_INT);
        }
        
        if (b==QueryConstants.NULL_INT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(char a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(char a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(char a, double b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_DOUBLE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(char a, double b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_DOUBLE);
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(char a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(char a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(char a, long b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_LONG) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_LONG){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(char a, long b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_LONG);
        }
        
        if (b==QueryConstants.NULL_LONG){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(char a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(char a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(char a, float b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_FLOAT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(char a, float b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_FLOAT);
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(char a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(char a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(char a, char b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_CHAR) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(char a, char b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_CHAR);
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(char a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(char a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(char a, byte b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_BYTE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(char a, byte b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_BYTE);
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(char a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(char a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(char a, short b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_SHORT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(char a, short b) {
        if (a==QueryConstants.NULL_CHAR){
            return (b==QueryConstants.NULL_SHORT);
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(char a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(char a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(byte a, int b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_INT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_INT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(byte a, int b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_INT);
        }
        
        if (b==QueryConstants.NULL_INT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(byte a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(byte a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(byte a, double b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_DOUBLE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(byte a, double b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_DOUBLE);
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(byte a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(byte a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(byte a, long b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_LONG) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_LONG){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(byte a, long b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_LONG);
        }
        
        if (b==QueryConstants.NULL_LONG){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(byte a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(byte a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(byte a, float b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_FLOAT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(byte a, float b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_FLOAT);
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(byte a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(byte a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(byte a, char b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_CHAR) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(byte a, char b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_CHAR);
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(byte a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(byte a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(byte a, byte b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_BYTE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(byte a, byte b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_BYTE);
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(byte a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(byte a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(byte a, short b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_SHORT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(byte a, short b) {
        if (a==QueryConstants.NULL_BYTE){
            return (b==QueryConstants.NULL_SHORT);
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(byte a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(byte a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(short a, int b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_INT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_INT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(short a, int b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_INT);
        }
        
        if (b==QueryConstants.NULL_INT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(short a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(short a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(short a, double b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_DOUBLE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(short a, double b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_DOUBLE);
        }
        
        if (b==QueryConstants.NULL_DOUBLE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(short a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(short a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(short a, long b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_LONG) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_LONG){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(short a, long b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_LONG);
        }
        
        if (b==QueryConstants.NULL_LONG){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(short a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(short a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(short a, float b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_FLOAT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return 1;
        }

        return Double.compare(a, b);
    }

    public static boolean eq(short a, float b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_FLOAT);
        }
        
        if (b==QueryConstants.NULL_FLOAT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(short a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(short a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(short a, char b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_CHAR) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(short a, char b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_CHAR);
        }
        
        if (b==QueryConstants.NULL_CHAR){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(short a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(short a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(short a, byte b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_BYTE) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(short a, byte b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_BYTE);
        }
        
        if (b==QueryConstants.NULL_BYTE){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(short a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(short a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static int compareTo(short a, short b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_SHORT) ? 0 : -1;
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return 1;
        }

        return a<b ? -1 : (a==b ? 0 : 1);
    }

    public static boolean eq(short a, short b) {
        if (a==QueryConstants.NULL_SHORT){
            return (b==QueryConstants.NULL_SHORT);
        }
        
        if (b==QueryConstants.NULL_SHORT){
            return false;
        }

        return a==b;
    }

    public static boolean[] eqArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(short a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(short a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(int a, int b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(int a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(int a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(int a, double b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(int a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(int a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(int a, long b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(int a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(int a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(int a, float b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(int a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(int a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(int a, char b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(int a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(int a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(int a, byte b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(int a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(int a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(int a, short b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(int a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(int a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(double a, int b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(double a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(double a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(double a, double b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(double a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(double a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(double a, long b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(double a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(double a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(double a, float b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(double a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(double a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(double a, char b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(double a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(double a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(double a, byte b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(double a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(double a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(double a, short b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(double a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(double a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(long a, int b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(long a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(long a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(long a, double b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(long a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(long a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(long a, long b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(long a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(long a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(long a, float b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(long a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(long a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(long a, char b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(long a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(long a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(long a, byte b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(long a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(long a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(long a, short b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(long a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(long a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(float a, int b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(float a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(float a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(float a, double b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(float a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(float a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(float a, long b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(float a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(float a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(float a, float b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(float a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(float a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(float a, char b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(float a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(float a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(float a, byte b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(float a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(float a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(float a, short b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(float a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(float a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(char a, int b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(char a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(char a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(char a, double b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(char a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(char a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(char a, long b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(char a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(char a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(char a, float b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(char a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(char a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(char a, char b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(char a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(char a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(char a, byte b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(char a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(char a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(char a, short b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(char a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(char a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(byte a, int b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(byte a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(byte a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(byte a, double b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(byte a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(byte a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(byte a, long b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(byte a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(byte a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(byte a, float b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(byte a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(byte a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(byte a, char b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(byte a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(byte a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(byte a, byte b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(byte a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(byte a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(byte a, short b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(byte a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(byte a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(short a, int b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(short a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(short a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(short a, double b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(short a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(short a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(short a, long b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(short a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(short a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(short a, float b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(short a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(short a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(short a, char b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(short a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(short a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(short a, byte b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(short a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(short a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(short a, short b){
        return compareTo(a,b)<0;
    }

    public static boolean[] LESSArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(short a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(short a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(int a, int b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(int a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(int a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(int a, double b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(int a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(int a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(int a, long b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(int a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(int a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(int a, float b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(int a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(int a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(int a, char b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(int a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(int a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(int a, byte b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(int a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(int a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(int a, short b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(int a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(int a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(double a, int b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(double a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(double a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(double a, double b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(double a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(double a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(double a, long b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(double a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(double a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(double a, float b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(double a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(double a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(double a, char b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(double a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(double a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(double a, byte b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(double a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(double a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(double a, short b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(double a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(double a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(long a, int b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(long a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(long a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(long a, double b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(long a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(long a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(long a, long b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(long a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(long a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(long a, float b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(long a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(long a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(long a, char b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(long a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(long a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(long a, byte b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(long a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(long a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(long a, short b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(long a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(long a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(float a, int b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(float a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(float a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(float a, double b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(float a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(float a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(float a, long b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(float a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(float a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(float a, float b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(float a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(float a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(float a, char b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(float a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(float a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(float a, byte b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(float a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(float a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(float a, short b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(float a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(float a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(char a, int b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(char a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(char a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(char a, double b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(char a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(char a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(char a, long b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(char a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(char a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(char a, float b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(char a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(char a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(char a, char b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(char a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(char a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(char a, byte b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(char a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(char a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(char a, short b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(char a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(char a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(byte a, int b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(byte a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(byte a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(byte a, double b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(byte a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(byte a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(byte a, long b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(byte a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(byte a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(byte a, float b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(byte a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(byte a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(byte a, char b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(byte a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(byte a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(byte a, byte b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(byte a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(byte a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(byte a, short b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(byte a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(byte a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(short a, int b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(short a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(short a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(short a, double b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(short a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(short a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(short a, long b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(short a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(short a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(short a, float b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(short a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(short a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(short a, char b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(short a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(short a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(short a, byte b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(short a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(short a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER(short a, short b){
        return compareTo(a,b)>0;
    }

    public static boolean[] GREATERArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(short a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(short a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(int a, int b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(int a, double b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(int a, long b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(int a, float b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(int a, char b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(int a, byte b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(int a, short b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(int a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(double a, int b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(double a, double b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(double a, long b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(double a, float b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(double a, char b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(double a, byte b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(double a, short b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(double a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(long a, int b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(long a, double b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(long a, long b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(long a, float b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(long a, char b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(long a, byte b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(long a, short b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(long a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(float a, int b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(float a, double b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(float a, long b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(float a, float b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(float a, char b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(float a, byte b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(float a, short b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(float a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(char a, int b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(char a, double b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(char a, long b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(char a, float b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(char a, char b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(char a, byte b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(char a, short b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(char a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(byte a, int b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(byte a, double b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(byte a, long b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(byte a, float b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(byte a, char b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(byte a, byte b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(byte a, short b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(byte a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(short a, int b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(short a, double b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(short a, long b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(short a, float b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(short a, char b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(short a, byte b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS_EQUALS(short a, short b){
        return compareTo(a,b)<=0;
    }

    public static boolean[] LESS_EQUALSArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(short a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(int a, int b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(int a, double b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(int a, long b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(int a, float b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(int a, char b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(int a, byte b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(int a, short b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (int, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(int a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(double a, int b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(double a, double b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(double a, long b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(double a, float b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(double a, char b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(double a, byte b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(double a, short b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (double, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(double a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(long a, int b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(long a, double b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(long a, long b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(long a, float b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(long a, char b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(long a, byte b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(long a, short b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (long, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(long a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(float a, int b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(float a, double b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(float a, long b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(float a, float b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(float a, char b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(float a, byte b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(float a, short b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (float, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(float a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(char a, int b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(char a, double b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(char a, long b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(char a, float b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(char a, char b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(char a, byte b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(char a, short b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (char, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(char a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(byte a, int b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(byte a, double b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(byte a, long b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(byte a, float b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(byte a, char b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(byte a, byte b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(byte a, short b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (byte, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(byte a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(short a, int b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], int b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, int) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], int b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a, int b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(short a, double b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], double b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, double) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], double b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a, double b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(short a, long b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], long b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, long) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], long b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a, long b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(short a, float b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], float b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, float) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], float b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a, float b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(short a, char b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], char b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, char) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], char b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a, char b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(short a, byte b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], byte b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, byte) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], byte b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a, byte b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean GREATER_EQUALS(short a, short b){
        return compareTo(a,b)>=0;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], short b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (short, short) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a[], short b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(short a, short b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean LESS(Comparable a, Comparable b){
        return compareTo(a,b)<0;
    }

    public static boolean GREATER(Comparable a, Comparable b){
        return compareTo(a,b)>0;
    }

    public static boolean LESS_EQUALS(Comparable a, Comparable b){
        return compareTo(a,b)<=0;
    }

    public static boolean GREATER_EQUALS(Comparable a, Comparable b){
        return compareTo(a,b)>=0;
    }

    public static Boolean BINARY_OR(Boolean a, Boolean b){
        return a==QueryConstants.NULL_BOOLEAN || b==QueryConstants.NULL_BOOLEAN ? QueryConstants.NULL_BOOLEAN : Boolean.valueOf(a|b);
    }

    public static Boolean XOR(Boolean a, Boolean b){
        return a==QueryConstants.NULL_BOOLEAN || b==QueryConstants.NULL_BOOLEAN ? QueryConstants.NULL_BOOLEAN : Boolean.valueOf(a^b);
    }

    public static Boolean BINARY_AND(Boolean a, Boolean b){
        return a==QueryConstants.NULL_BOOLEAN || b==QueryConstants.NULL_BOOLEAN ? QueryConstants.NULL_BOOLEAN : Boolean.valueOf(a&b);
    }

    public static boolean[] eqArray(Boolean a[], boolean b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (Boolean, boolean) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(boolean a[], Boolean b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (boolean, Boolean) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(boolean a[], boolean b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (boolean, boolean) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(Object a[], Object b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to check equality of two arrays (Object, Object) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] eqArray(boolean a[], Boolean b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(Object a[], Object b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = eq(a[i],b);
        }

        return ret;
    }

    public static boolean[] eqArray(Boolean a, boolean b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static boolean[] eqArray(Object a, Object b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = eq(a,b[i]);
        }

        return ret;
    }

    public static boolean[] LESSArray(Comparable a[], Comparable b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (Comparable, Comparable) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESSArray(Comparable a[], Comparable b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESSArray(Comparable a, Comparable b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS(a,b[i]);
        }

        return ret;
    }

    public static boolean[] GREATERArray(Comparable a[], Comparable b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (Comparable, Comparable) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATERArray(Comparable a[], Comparable b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATERArray(Comparable a, Comparable b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER(a,b[i]);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(Comparable a[], Comparable b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (Comparable, Comparable) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] LESS_EQUALSArray(Comparable a[], Comparable b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = LESS_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] LESS_EQUALSArray(Comparable a, Comparable b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = LESS_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(Comparable a[], Comparable b[]){
        if (a.length != b.length) throw new IllegalArgumentException("Attempt to compare two arrays (Comparable, Comparable) of different length" +
                " (a.length=" + a.length + ", b.length=" + b.length + ')');
        
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b[i]);
        }
        
        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(Comparable a[], Comparable b){
        boolean[] ret = new boolean[a.length];
        for (int i = 0; i < a.length; i++) {
            ret[i] = GREATER_EQUALS(a[i],b);
        }

        return ret;
    }

    public static boolean[] GREATER_EQUALSArray(Comparable a, Comparable b[]){
        boolean[] ret = new boolean[b.length];
        for (int i = 0; i < b.length; i++) {
            ret[i] = GREATER_EQUALS(a,b[i]);
        }

        return ret;
    }

    public static double doubleCast(int a){
        return a==QueryConstants.NULL_INT ? QueryConstants.NULL_DOUBLE : (double)a;
    }

    public static long longCast(int a){
        return a==QueryConstants.NULL_INT ? QueryConstants.NULL_LONG : (long)a;
    }

    public static float floatCast(int a){
        return a==QueryConstants.NULL_INT ? QueryConstants.NULL_FLOAT : (float)a;
    }

    public static char charCast(int a){
        return a==QueryConstants.NULL_INT ? QueryConstants.NULL_CHAR : (char)a;
    }

    public static byte byteCast(int a){
        return a==QueryConstants.NULL_INT ? QueryConstants.NULL_BYTE : (byte)a;
    }

    public static short shortCast(int a){
        return a==QueryConstants.NULL_INT ? QueryConstants.NULL_SHORT : (short)a;
    }

    public static int intCast(double a){
        return a==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_INT : (int)a;
    }

    public static long longCast(double a){
        return a==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_LONG : (long)a;
    }

    public static float floatCast(double a){
        return a==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_FLOAT : (float)a;
    }

    public static char charCast(double a){
        return a==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_CHAR : (char)a;
    }

    public static byte byteCast(double a){
        return a==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_BYTE : (byte)a;
    }

    public static short shortCast(double a){
        return a==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_SHORT : (short)a;
    }

    public static int intCast(long a){
        return a==QueryConstants.NULL_LONG ? QueryConstants.NULL_INT : (int)a;
    }

    public static double doubleCast(long a){
        return a==QueryConstants.NULL_LONG ? QueryConstants.NULL_DOUBLE : (double)a;
    }

    public static float floatCast(long a){
        return a==QueryConstants.NULL_LONG ? QueryConstants.NULL_FLOAT : (float)a;
    }

    public static char charCast(long a){
        return a==QueryConstants.NULL_LONG ? QueryConstants.NULL_CHAR : (char)a;
    }

    public static byte byteCast(long a){
        return a==QueryConstants.NULL_LONG ? QueryConstants.NULL_BYTE : (byte)a;
    }

    public static short shortCast(long a){
        return a==QueryConstants.NULL_LONG ? QueryConstants.NULL_SHORT : (short)a;
    }

    public static int intCast(float a){
        return a==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_INT : (int)a;
    }

    public static double doubleCast(float a){
        return a==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_DOUBLE : (double)a;
    }

    public static long longCast(float a){
        return a==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_LONG : (long)a;
    }

    public static char charCast(float a){
        return a==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_CHAR : (char)a;
    }

    public static byte byteCast(float a){
        return a==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_BYTE : (byte)a;
    }

    public static short shortCast(float a){
        return a==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_SHORT : (short)a;
    }

    public static int intCast(char a){
        return a==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : (int)a;
    }

    public static double doubleCast(char a){
        return a==QueryConstants.NULL_CHAR ? QueryConstants.NULL_DOUBLE : (double)a;
    }

    public static long longCast(char a){
        return a==QueryConstants.NULL_CHAR ? QueryConstants.NULL_LONG : (long)a;
    }

    public static float floatCast(char a){
        return a==QueryConstants.NULL_CHAR ? QueryConstants.NULL_FLOAT : (float)a;
    }

    public static byte byteCast(char a){
        return a==QueryConstants.NULL_CHAR ? QueryConstants.NULL_BYTE : (byte)a;
    }

    public static short shortCast(char a){
        return a==QueryConstants.NULL_CHAR ? QueryConstants.NULL_SHORT : (short)a;
    }

    public static int intCast(byte a){
        return a==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : (int)a;
    }

    public static double doubleCast(byte a){
        return a==QueryConstants.NULL_BYTE ? QueryConstants.NULL_DOUBLE : (double)a;
    }

    public static long longCast(byte a){
        return a==QueryConstants.NULL_BYTE ? QueryConstants.NULL_LONG : (long)a;
    }

    public static float floatCast(byte a){
        return a==QueryConstants.NULL_BYTE ? QueryConstants.NULL_FLOAT : (float)a;
    }

    public static char charCast(byte a){
        return a==QueryConstants.NULL_BYTE ? QueryConstants.NULL_CHAR : (char)a;
    }

    public static short shortCast(byte a){
        return a==QueryConstants.NULL_BYTE ? QueryConstants.NULL_SHORT : (short)a;
    }

    public static int intCast(short a){
        return a==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : (int)a;
    }

    public static double doubleCast(short a){
        return a==QueryConstants.NULL_SHORT ? QueryConstants.NULL_DOUBLE : (double)a;
    }

    public static long longCast(short a){
        return a==QueryConstants.NULL_SHORT ? QueryConstants.NULL_LONG : (long)a;
    }

    public static float floatCast(short a){
        return a==QueryConstants.NULL_SHORT ? QueryConstants.NULL_FLOAT : (float)a;
    }

    public static char charCast(short a){
        return a==QueryConstants.NULL_SHORT ? QueryConstants.NULL_CHAR : (char)a;
    }

    public static byte byteCast(short a){
        return a==QueryConstants.NULL_SHORT ? QueryConstants.NULL_BYTE : (byte)a;
    }

    public static int intCast(Object a){
        return a==null ? QueryConstants.NULL_INT : (int)a;
    }

    public static double doubleCast(Object a){
        return a==null ? QueryConstants.NULL_DOUBLE : (double)a;
    }

    public static long longCast(Object a){
        return a==null ? QueryConstants.NULL_LONG : (long)a;
    }

    public static float floatCast(Object a){
        return a==null ? QueryConstants.NULL_FLOAT : (float)a;
    }

    public static char charCast(Object a){
        return a==null ? QueryConstants.NULL_CHAR : (char)a;
    }

    public static byte byteCast(Object a){
        return a==null ? QueryConstants.NULL_BYTE : (byte)a;
    }

    public static short shortCast(Object a){
        return a==null ? QueryConstants.NULL_SHORT : (short)a;
    }

    public static int negate(int a){
        return a==QueryConstants.NULL_INT ? QueryConstants.NULL_INT : -a;
    }

    public static double negate(double a){
        return a==QueryConstants.NULL_DOUBLE ? QueryConstants.NULL_DOUBLE : -a;
    }

    public static long negate(long a){
        return a==QueryConstants.NULL_LONG ? QueryConstants.NULL_LONG : -a;
    }

    public static float negate(float a){
        return a==QueryConstants.NULL_FLOAT ? QueryConstants.NULL_FLOAT : -a;
    }

    public static int negate(char a){
        return a==QueryConstants.NULL_CHAR ? QueryConstants.NULL_INT : -a;
    }

    public static int negate(byte a){
        return a==QueryConstants.NULL_BYTE ? QueryConstants.NULL_INT : -a;
    }

    public static int negate(short a){
        return a==QueryConstants.NULL_SHORT ? QueryConstants.NULL_INT : -a;
    }

}

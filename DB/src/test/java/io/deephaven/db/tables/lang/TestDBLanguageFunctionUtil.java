/*
 * Copyright (c) 2016-2021 Deephaven Data Labs and Patent Pending
 * GENERATED CODE - DO NOT MODIFY DIRECTLY
 * This class generated by io.deephaven.db.tables.lang.DBLanguageFunctionGenerator
 */

package io.deephaven.db.tables.lang;

import io.deephaven.util.QueryConstants;

import junit.framework.TestCase;

@SuppressWarnings({"unused", "WeakerAccess", "NumericOverflow"})
public final class TestDBLanguageFunctionUtil extends TestCase {

    public static void test_PLUS_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte)42;
        final int zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_int_short() {
        final int value1 = 42;
        final short value2 = (short)42;
        final int zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte)42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_double_short() {
        final double value1 = 42d;
        final short value2 = (short)42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte)42;
        final long zero1 = 0;
        final byte zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_long_short() {
        final long value1 = 42L;
        final short value2 = (short)42;
        final long zero1 = 0;
        final short zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte)42;
        final float zero1 = 0;
        final byte zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_float_short() {
        final float value1 = 42f;
        final short value2 = (short)42;
        final float zero1 = 0;
        final short zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte)42;
        final char zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_char_short() {
        final char value1 = '0';
        final short value2 = (short)42;
        final char zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_byte_int() {
        final byte value1 = (byte)42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_byte_double() {
        final byte value1 = (byte)42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_byte_long() {
        final byte value1 = (byte)42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_byte_float() {
        final byte value1 = (byte)42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_byte_char() {
        final byte value1 = (byte)42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_byte_byte() {
        final byte value1 = (byte)42;
        final byte value2 = (byte)42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_byte_short() {
        final byte value1 = (byte)42;
        final short value2 = (short)42;
        final byte zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_short_int() {
        final short value1 = (short)42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_short_double() {
        final short value1 = (short)42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_short_long() {
        final short value1 = (short)42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_short_float() {
        final short value1 = (short)42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_short_char() {
        final short value1 = (short)42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_short_byte() {
        final short value1 = (short)42;
        final byte value2 = (byte)42;
        final short zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_PLUS_short_short() {
        final short value1 = (short)42;
        final short value2 = (short)42;
        final short zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.PLUS(value1, value2);
            expectedResult = value1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, value2), value1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(zero1, value2);
            expectedResult = zero1+value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(zero1, value2), zero1+value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.PLUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte)42;
        final int zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_int_short() {
        final int value1 = 42;
        final short value2 = (short)42;
        final int zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte)42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_double_short() {
        final double value1 = 42d;
        final short value2 = (short)42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte)42;
        final long zero1 = 0;
        final byte zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_long_short() {
        final long value1 = 42L;
        final short value2 = (short)42;
        final long zero1 = 0;
        final short zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte)42;
        final float zero1 = 0;
        final byte zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_float_short() {
        final float value1 = 42f;
        final short value2 = (short)42;
        final float zero1 = 0;
        final short zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte)42;
        final char zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_char_short() {
        final char value1 = '0';
        final short value2 = (short)42;
        final char zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_byte_int() {
        final byte value1 = (byte)42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_byte_double() {
        final byte value1 = (byte)42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_byte_long() {
        final byte value1 = (byte)42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_byte_float() {
        final byte value1 = (byte)42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_byte_char() {
        final byte value1 = (byte)42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_byte_byte() {
        final byte value1 = (byte)42;
        final byte value2 = (byte)42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_byte_short() {
        final byte value1 = (byte)42;
        final short value2 = (short)42;
        final byte zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_short_int() {
        final short value1 = (short)42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_short_double() {
        final short value1 = (short)42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_short_long() {
        final short value1 = (short)42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_short_float() {
        final short value1 = (short)42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_short_char() {
        final short value1 = (short)42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_short_byte() {
        final short value1 = (short)42;
        final byte value2 = (byte)42;
        final short zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MINUS_short_short() {
        final short value1 = (short)42;
        final short value2 = (short)42;
        final short zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MINUS(value1, value2);
            expectedResult = value1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, value2), value1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(zero1, value2);
            expectedResult = zero1-value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(zero1, value2), zero1-value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MINUS(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte)42;
        final int zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_int_short() {
        final int value1 = 42;
        final short value2 = (short)42;
        final int zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte)42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_double_short() {
        final double value1 = 42d;
        final short value2 = (short)42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte)42;
        final long zero1 = 0;
        final byte zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_long_short() {
        final long value1 = 42L;
        final short value2 = (short)42;
        final long zero1 = 0;
        final short zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte)42;
        final float zero1 = 0;
        final byte zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_float_short() {
        final float value1 = 42f;
        final short value2 = (short)42;
        final float zero1 = 0;
        final short zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte)42;
        final char zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_char_short() {
        final char value1 = '0';
        final short value2 = (short)42;
        final char zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_byte_int() {
        final byte value1 = (byte)42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_byte_double() {
        final byte value1 = (byte)42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_byte_long() {
        final byte value1 = (byte)42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_byte_float() {
        final byte value1 = (byte)42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_byte_char() {
        final byte value1 = (byte)42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_byte_byte() {
        final byte value1 = (byte)42;
        final byte value2 = (byte)42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_byte_short() {
        final byte value1 = (byte)42;
        final short value2 = (short)42;
        final byte zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_short_int() {
        final short value1 = (short)42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_short_double() {
        final short value1 = (short)42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_short_long() {
        final short value1 = (short)42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_short_float() {
        final short value1 = (short)42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_short_char() {
        final short value1 = (short)42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_short_byte() {
        final short value1 = (short)42;
        final byte value2 = (byte)42;
        final short zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_MULTIPLY_short_short() {
        final short value1 = (short)42;
        final short value2 = (short)42;
        final short zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, value2);
            expectedResult = value1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, value2), value1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(zero1, value2);
            expectedResult = zero1*value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(zero1, value2), zero1*value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.MULTIPLY(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte)42;
        final int zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_int_short() {
        final int value1 = 42;
        final short value2 = (short)42;
        final int zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte)42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_double_short() {
        final double value1 = 42d;
        final short value2 = (short)42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte)42;
        final long zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_long_short() {
        final long value1 = 42L;
        final short value2 = (short)42;
        final long zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte)42;
        final float zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_float_short() {
        final float value1 = 42f;
        final short value2 = (short)42;
        final float zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte)42;
        final char zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_char_short() {
        final char value1 = '0';
        final short value2 = (short)42;
        final char zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_byte_int() {
        final byte value1 = (byte)42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_byte_double() {
        final byte value1 = (byte)42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_byte_long() {
        final byte value1 = (byte)42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_byte_float() {
        final byte value1 = (byte)42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_byte_char() {
        final byte value1 = (byte)42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_byte_byte() {
        final byte value1 = (byte)42;
        final byte value2 = (byte)42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_byte_short() {
        final byte value1 = (byte)42;
        final short value2 = (short)42;
        final byte zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_short_int() {
        final short value1 = (short)42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_short_double() {
        final short value1 = (short)42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_short_long() {
        final short value1 = (short)42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_short_float() {
        final short value1 = (short)42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_short_char() {
        final short value1 = (short)42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_short_byte() {
        final short value1 = (short)42;
        final byte value2 = (byte)42;
        final short zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_DIVIDE_short_short() {
        final short value1 = (short)42;
        final short value2 = (short)42;
        final short zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, value2);
            expectedResult = value1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, value2), value1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(zero1, value2);
            expectedResult = zero1/(double)value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(zero1, value2), zero1/(double)value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.DIVIDE(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_int_int() {
        final int value1 = 42;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_int_double() {
        final int value1 = 42;
        final double value2 = 42d;
        final int zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_int_long() {
        final int value1 = 42;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_int_float() {
        final int value1 = 42;
        final float value2 = 42f;
        final int zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_int_char() {
        final int value1 = 42;
        final char value2 = '0';
        final int zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_int_byte() {
        final int value1 = 42;
        final byte value2 = (byte)42;
        final int zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_int_short() {
        final int value1 = 42;
        final short value2 = (short)42;
        final int zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_double_int() {
        final double value1 = 42d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_double_double() {
        final double value1 = 42d;
        final double value2 = 42d;
        final double zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_double_long() {
        final double value1 = 42d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_double_float() {
        final double value1 = 42d;
        final float value2 = 42f;
        final double zero1 = 0;
        final float zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_double_char() {
        final double value1 = 42d;
        final char value2 = '0';
        final double zero1 = 0;
        final char zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_double_byte() {
        final double value1 = 42d;
        final byte value2 = (byte)42;
        final double zero1 = 0;
        final byte zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_double_short() {
        final double value1 = 42d;
        final short value2 = (short)42;
        final double zero1 = 0;
        final short zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_long_int() {
        final long value1 = 42L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_INT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_long_double() {
        final long value1 = 42L;
        final double value2 = 42d;
        final long zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_long_long() {
        final long value1 = 42L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_long_float() {
        final long value1 = 42L;
        final float value2 = 42f;
        final long zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_long_char() {
        final long value1 = 42L;
        final char value2 = '0';
        final long zero1 = 0;
        final char zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_long_byte() {
        final long value1 = 42L;
        final byte value2 = (byte)42;
        final long zero1 = 0;
        final byte zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_long_short() {
        final long value1 = 42L;
        final short value2 = (short)42;
        final long zero1 = 0;
        final short zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_float_int() {
        final float value1 = 42f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_float_double() {
        final float value1 = 42f;
        final double value2 = 42d;
        final float zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_float_long() {
        final float value1 = 42f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_float_float() {
        final float value1 = 42f;
        final float value2 = 42f;
        final float zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_float_char() {
        final float value1 = 42f;
        final char value2 = '0';
        final float zero1 = 0;
        final char zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_float_byte() {
        final float value1 = 42f;
        final byte value2 = (byte)42;
        final float zero1 = 0;
        final byte zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_float_short() {
        final float value1 = 42f;
        final short value2 = (short)42;
        final float zero1 = 0;
        final short zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_char_int() {
        final char value1 = '0';
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_char_double() {
        final char value1 = '0';
        final double value2 = 42d;
        final char zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_char_long() {
        final char value1 = '0';
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_char_float() {
        final char value1 = '0';
        final float value2 = 42f;
        final char zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_char_char() {
        final char value1 = '0';
        final char value2 = '0';
        final char zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_char_byte() {
        final char value1 = '0';
        final byte value2 = (byte)42;
        final char zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_char_short() {
        final char value1 = '0';
        final short value2 = (short)42;
        final char zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_byte_int() {
        final byte value1 = (byte)42;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_byte_double() {
        final byte value1 = (byte)42;
        final double value2 = 42d;
        final byte zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_byte_long() {
        final byte value1 = (byte)42;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_byte_float() {
        final byte value1 = (byte)42;
        final float value2 = 42f;
        final byte zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_byte_char() {
        final byte value1 = (byte)42;
        final char value2 = '0';
        final byte zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_byte_byte() {
        final byte value1 = (byte)42;
        final byte value2 = (byte)42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_byte_short() {
        final byte value1 = (byte)42;
        final short value2 = (short)42;
        final byte zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_short_int() {
        final short value1 = (short)42;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_short_double() {
        final short value1 = (short)42;
        final double value2 = 42d;
        final short zero1 = 0;
        final double zero2 = 0;

        double dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE);
            expectedResult = QueryConstants.NULL_DOUBLE;
            compareResult = Double.compare(dbResult, expectedResult);
            description = "Double.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE), QueryConstants.NULL_DOUBLE)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_short_long() {
        final short value1 = (short)42;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        long dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG);
            expectedResult = QueryConstants.NULL_LONG;
            compareResult = Long.compare(dbResult, expectedResult);
            description = "Long.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG), QueryConstants.NULL_LONG)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_short_float() {
        final short value1 = (short)42;
        final float value2 = 42f;
        final short zero1 = 0;
        final float zero2 = 0;

        float dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT);
            expectedResult = QueryConstants.NULL_FLOAT;
            compareResult = Float.compare(dbResult, expectedResult);
            description = "Float.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT), QueryConstants.NULL_FLOAT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_short_char() {
        final short value1 = (short)42;
        final char value2 = '0';
        final short zero1 = 0;
        final char zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_short_byte() {
        final short value1 = (short)42;
        final byte value2 = (byte)42;
        final short zero1 = 0;
        final byte zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_REMAINDER_short_short() {
        final short value1 = (short)42;
        final short value2 = (short)42;
        final short zero1 = 0;
        final short zero2 = 0;

        int dbResult = -1, expectedResult = -1;
        int compareResult;
        String description;

        try {
            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, value2);
            expectedResult = value1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, value2), value1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(value1, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(zero1, value2);
            expectedResult = zero1%value2;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(zero1, value2), zero1%value2)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, value2), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);

            dbResult = DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT);
            expectedResult = QueryConstants.NULL_INT;
            compareResult = Integer.compare(dbResult, expectedResult);
            description = "Integer.compare(DBLanguageFunctionUtil.REMAINDER(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT), QueryConstants.NULL_INT)";
            TestCase.assertEquals(description, 0, compareResult);
        } catch (Exception ex) {
            throw new RuntimeException("Comparison failure: dbResult=" + dbResult + ", expectedResult=" + expectedResult, ex);
        }

    }

    public static void test_compare_int_int_compare() {
        final int value1 = 1;
        final int value2 = 42;
        final int zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_INT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_int_double_compare() {
        final int value1 = 1;
        final double value2 = 42.0d;
        final int zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_int_long_compare() {
        final int value1 = 1;
        final long value2 = 42L;
        final int zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_LONG));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_int_float_compare() {
        final int value1 = 1;
        final float value2 = 42.0f;
        final int zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_int_char_compare() {
        final int value1 = 1;
        final char value2 = '1';
        final int zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_CHAR));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_int_byte_compare() {
        final int value1 = 1;
        final byte value2 = (byte)42;
        final int zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_BYTE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_int_short_compare() {
        final int value1 = 1;
        final short value2 = (short)42;
        final int zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_INT, QueryConstants.NULL_SHORT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_double_int_compare() {
        final double value1 = 0.01d;
        final int value2 = 42;
        final double zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_INT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_double_double_compare() {
        final double value1 = 0.01d;
        final double value2 = 42.0d;
        final double zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_double_long_compare() {
        final double value1 = 0.01d;
        final long value2 = 42L;
        final double zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_LONG));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_double_float_compare() {
        final double value1 = 0.01d;
        final float value2 = 42.0f;
        final double zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_double_char_compare() {
        final double value1 = 0.01d;
        final char value2 = '1';
        final double zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_CHAR));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_double_byte_compare() {
        final double value1 = 0.01d;
        final byte value2 = (byte)42;
        final double zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_BYTE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_double_short_compare() {
        final double value1 = 0.01d;
        final short value2 = (short)42;
        final double zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_DOUBLE, QueryConstants.NULL_SHORT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_long_int_compare() {
        final long value1 = 1L;
        final int value2 = 42;
        final long zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_INT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_long_double_compare() {
        final long value1 = 1L;
        final double value2 = 42.0d;
        final long zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_long_long_compare() {
        final long value1 = 1L;
        final long value2 = 42L;
        final long zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_LONG));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_long_float_compare() {
        final long value1 = 1L;
        final float value2 = 42.0f;
        final long zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_long_char_compare() {
        final long value1 = 1L;
        final char value2 = '1';
        final long zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_CHAR));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_long_byte_compare() {
        final long value1 = 1L;
        final byte value2 = (byte)42;
        final long zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_BYTE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_long_short_compare() {
        final long value1 = 1L;
        final short value2 = (short)42;
        final long zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_LONG, QueryConstants.NULL_SHORT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_float_int_compare() {
        final float value1 = 0.01f;
        final int value2 = 42;
        final float zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_INT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_float_double_compare() {
        final float value1 = 0.01f;
        final double value2 = 42.0d;
        final float zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_float_long_compare() {
        final float value1 = 0.01f;
        final long value2 = 42L;
        final float zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_LONG));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_float_float_compare() {
        final float value1 = 0.01f;
        final float value2 = 42.0f;
        final float zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_float_char_compare() {
        final float value1 = 0.01f;
        final char value2 = '1';
        final float zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_CHAR));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_float_byte_compare() {
        final float value1 = 0.01f;
        final byte value2 = (byte)42;
        final float zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_BYTE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_float_short_compare() {
        final float value1 = 0.01f;
        final short value2 = (short)42;
        final float zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_FLOAT, QueryConstants.NULL_SHORT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_char_int_compare() {
        final char value1 = (char)1;
        final int value2 = 42;
        final char zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_INT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_char_double_compare() {
        final char value1 = (char)1;
        final double value2 = 42.0d;
        final char zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_char_long_compare() {
        final char value1 = (char)1;
        final long value2 = 42L;
        final char zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_LONG));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_char_float_compare() {
        final char value1 = (char)1;
        final float value2 = 42.0f;
        final char zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_char_char_compare() {
        final char value1 = (char)1;
        final char value2 = '1';
        final char zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_CHAR));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_char_byte_compare() {
        final char value1 = (char)1;
        final byte value2 = (byte)42;
        final char zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_BYTE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_char_short_compare() {
        final char value1 = (char)1;
        final short value2 = (short)42;
        final char zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_CHAR, QueryConstants.NULL_SHORT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_int_compare() {
        final byte value1 = (byte)1;
        final int value2 = 42;
        final byte zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_INT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_double_compare() {
        final byte value1 = (byte)1;
        final double value2 = 42.0d;
        final byte zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_long_compare() {
        final byte value1 = (byte)1;
        final long value2 = 42L;
        final byte zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_LONG));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_float_compare() {
        final byte value1 = (byte)1;
        final float value2 = 42.0f;
        final byte zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_char_compare() {
        final byte value1 = (byte)1;
        final char value2 = '1';
        final byte zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_CHAR));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_byte_compare() {
        final byte value1 = (byte)1;
        final byte value2 = (byte)42;
        final byte zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_BYTE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_byte_short_compare() {
        final byte value1 = (byte)1;
        final short value2 = (short)42;
        final byte zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_BYTE, QueryConstants.NULL_SHORT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_short_int_compare() {
        final short value1 = (short)1;
        final int value2 = 42;
        final short zero1 = 0;
        final int zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_INT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_short_double_compare() {
        final short value1 = (short)1;
        final double value2 = 42.0d;
        final short zero1 = 0;
        final double zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_DOUBLE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_short_long_compare() {
        final short value1 = (short)1;
        final long value2 = 42L;
        final short zero1 = 0;
        final long zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_LONG));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_short_float_compare() {
        final short value1 = (short)1;
        final float value2 = 42.0f;
        final short zero1 = 0;
        final float zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_FLOAT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_short_char_compare() {
        final short value1 = (short)1;
        final char value2 = '1';
        final short zero1 = 0;
        final char zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_CHAR));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_short_byte_compare() {
        final short value1 = (short)1;
        final byte value2 = (byte)42;
        final short zero1 = 0;
        final byte zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_BYTE));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

    public static void test_compare_short_short_compare() {
        final short value1 = (short)1;
        final short value2 = (short)42;
        final short zero1 = 0;
        final short zero2 = 0;

        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Float.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Float.NaN, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, Double.NaN));
        TestCase.assertEquals(1, DBLanguageFunctionUtil.compareTo(Double.NaN, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero1, zero2));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(zero2, zero1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(QueryConstants.NULL_SHORT, QueryConstants.NULL_SHORT));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value1, value1));
        TestCase.assertEquals( 0, DBLanguageFunctionUtil.compareTo(value2, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(value1, value2));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(value2, value1));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value1, value2));
        TestCase.assertEquals(-1, DBLanguageFunctionUtil.compareTo(-value2, value1));
        TestCase.assertEquals( 1, DBLanguageFunctionUtil.compareTo(-value1, -value2));
    }

}
